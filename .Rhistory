#print the structure
str(df)
##Select row 1 in column 2
df[1, 2]
##Select Rows 1 to 2
df[1:2,]
#Seleect columns 1
df[,1]
##Select Rows 1 to 3 columns 3 to 4
df[1:3, 3:4]
df[1:3 , c(2,4)]
#slice with columns name
df[,c ('ID' , 'store')]
dfquantity <-quantity
quantity <- quantity
df
df
#Select the column ID
df$ID
x <- data.frame("SN" = 1:2, "Age" = c(21,15) , "Name" = c("John" ,"Dora"))
str(x)    #structure of x
x <- data.frame("SN" = 1:2, "Age" = c(21,15) , "Name" = c("John" ,"Dora"), stringsAsFactors = FALSE)
str(x) #now the third column is a character vector
x["Name"]
x$Name
x[["Name"]]
x[[3]]
x
x[1,"Age"] <- 20; x
rbind(x,list(1,16,"Paul"))
cbind(x,State=c("NY" ,"FL"))
x$State <- c("NY" ,"FL");x
x$State <- NULL
x
x <- x[-1,]
x$State <- NULL
x
x <- x[-1,]
cbind(x,State=c("NY" ,"FL"))
x[1,"Age"] <- 20; x
rbind(x,list(1,16,"Paul"))
cbind(x,State=c("NY" ,"FL"))
x["Name"]
x$Name
x[["Name"]]
x <- data.frame("SN" = 1:2, "Age" = c(21,15) , "Name" = c("John" ,"Dora"))
str(x)    #structure of x
x <- data.frame("SN" = 1:2, "Age" = c(21,15) , "Name" = c("John" ,"Dora"), stringsAsFactors = FALSE)
str(x) #now the third column is a character vector
x["Name"]
x$Name
x[["Name"]]
x[[3]]
x
x[1,"Age"] <- 20; x
rbind(x,list(1,16,"Paul"))
cbind(x,State=c("NY" ,"FL"))
x$State <- c("NY" ,"FL");x
x$State <- NULL
x
#Example
x <- 0
if (x < 0)
print("Negative number")
} else if (x > 0) {
#Example
x <- 0
if (x < 0){
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else
print("Zero")
if (x < 0){
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else
print("Negative number")
if (x < 0){
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else
print("Positive number")
if (x < 0){
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else
print("Zero")
#in r studio else should be written just after if body end
#while
i <- 1
while (i<6){
print(i)
i = i+1
}
print(i)
i = i+1
while (i<6){
print(i)
i = i+1
}
while (i<6){
print(i)
i = i+1
}
#in r studio else should be written just after if body end
#while
i <- 1
while (i<6){
print(i)
i = i+1
}
abs(-4.2)
abs(4.2)
abs(4.2)
ceiling(1.4)
floor(1.4)
ceiling(1.4)
floor(1.4)
#example
a=c(5,7,2,9)
ifelse(a%%2==0,"even","odd")
#break statement
if(test_expression)
{
break
}
#example
x<-1:5
for(val in x)
{
if(val==3)
{
break
}
print(val)
}
#next statement
if(test_condition)
{
next
}
#example
1:5->x
for(val in x)
{
if(val==3)
{
next
}
}
#repeat loop
repeat
{
statement
}
{
print(x)
x=x+1
if(x==6)
{
break
}
}
#example
repeat
{
print(x)
x=x+1
if(x==6)
{
break
}
}
#example
1:5->x
#example
repeat
{
print(x)
x=x+1
if(x==6)
{
break
}
}
#example
repeat
{
print(x)
x=x+1
if(x==6)
{
break
}
}
#example
repeat
{
print(x)
x=x+1
if(x==6)
{
break
}
}
#example
x=1
repeat
{
print(x)
x=x+1
if(x==6)
{
break
}
}
#example
x<-1
repeat
{
print(x)
x=x+1
if(x==6)
{
break
}
}
#switch function
switch(expression,list)
#example
switch(2,"red","green","blue")
switch(1,"red","green","blue")
switch(4,"red","green","blue")
switch(0,"red","green","blue")->x
x
switch("color","color"="red","shape"="square","length"=5)
switch("length","color"="red","shape"="square","length"=5)
x<-switch(
3,
"my",
"switch",
"case"
)
pirnt(x)
"12"->y
x<-switch(
y,
"9"="good morning",
"12"="Good morning",
"18"="Good evening",
"21"="Good night"
)
#example
switch(2,"red","green","blue")
switch(1,"red","green","blue")
switch(4,"red","green","blue")
switch(0,"red","green","blue")->x
x
switch("color","color"="red","shape"="square","length"=5)
switch("length","color"="red","shape"="square","length"=5)
x<-switch(
3,
"my",
"switch",
"case"
)
print(x)
"12"->y
x<-switch(
y,
"9"="good morning",
"12"="Good morning",
"18"="Good evening",
"21"="Good night"
)
print(x)
"12"->y
x<-switch(
y,
"9"="good morning",
"12"="Good morning",
"18"="Good evening",
"21"="Good night"
)
print(x)
#example Armstrong
#taking input from user
num=as.numeric(readline(prompt='enter the numeber'))
#initialize sum
sum=0
#find the sum of the cube of each digit
temp=num
while(temp>0)
{
digit=temp%%10
sum=sum+(digit^3)
temp=floor(temp/10)
}
#display the result
if(num==sum)
{
print(paste(num,"s an armstromg"))
}else{
print(paste(num,"is not an armstrong"))
}
install.packages("sqldf")
library(sqldf)
#SQLDF
data()
data(iris)
sqldf("select * from iris limit 5")
View(iris)
sqldf("select count(*) from iris")
sqldf("select species, count(*) from iris group by species")
sqldf("select * from iris where [Sepal.Length]>5")
sqldf("select max([Petal.Length]) from iris")
data()
data("UCBAdmissions")
View(UCBAdmissions)
str(UCBAdmission)
ucb<-as.data.frame((UCBAdmissions))
str(ucb)
sqldf("select  * from ucb")
sqldf("select  * from ucb where Gender = 'female'")
sqldf("select  * from ucb where Admit = 'Admitted'")
sqldf("select * from ucb where Admit = 'Admitted' order by Freq DESC")
sqldf("select distinct Dept from ucb")
sqldf("select sum([Freq]) from ucb where Admit = 'Admitted'")
sqldlf("select sum(Freq) from ucb where Admit = 'Rejected'")
sqldf("select sum(Freq) as total_dudes from ucb where Admit = 'Admitted' AND Gender = 'male'")
sqldf("select sum(Freq) as total_ladies from ucb  where Admit = 'Rejected' AND Gender = 'Female'")
sqldf("select sum(Freq)")
sqldf("select sum(Freq)")
sqldf("select sum(Freq) from ucb where Admit = 'Admitted' AND Dept = 'E'")
sqldf("select Dept, sum(Freq) from ucb where Admit = 'Admitted' group by Dept")
sqldf("select Dept, sum(Freq) from ucb where Admit = 'Rejected' group by Dept")
#create another dataable, named majors
majors<-data.frame(major = c("math","biology","enginerring","computer science","history","architecture"),Dept=c(Letters[1:5],"others"),faculty=round(runif(6,min=10,max=30)))
majors
sqldf("select * from majors")
#how many majors are there
sqldf("select count(major) from majors")
#minimum number of students rejected
sqldf("select min(Freq from ucb where Admit = 'Rejected' ")
#wild card match Queries
sqldf("select * from ucb where Freq between 20 AND 100")
sqldf("select * from ucb where Gender Like 'Fe%'")
sqldf("select * from ucb where Gender Like '%male%'")
sqldf("select * from ucb where Gender Like 'Ma%'")
sqldf("select * from ucb where Gender = 'Female' AND Freq >= 100")
sqldf("select * from ucb where Gender Like '_ale'")
sqldf("select * from ucb where Gender Not Like 'M_l_'")
sqldf("select * from ucb where Gender Not Like 'M_l_'")
#wild card match Queries
sqldf("select * from ucb where Freq between 20 AND 100")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
x[[3]]
x["Name"]
x$Name
x[["Name"]]
x[[3]]
x
x[1,"Age"] <- 20; x
rbind(x,list(1,16,"Paul"))
cbind(x,State=c("NY" ,"FL"))
x$State <- c("NY" ,"FL");x
x$State <- NULL
x
x <- x[-1,]
x
str(x)
x[c(2,4)]
x[-1]
x[2] <- "divorced"      #modify second element
x
x[3] <- "widowed"       #can not assign values outside levels
x
levels(x) <- c(levels(x), "widowed")    #add new level
x[3] <-"widowed"
x
#DATA FRAME
#Create  a,b,c,d variables
a <- c(10,20,30,40)
b <- c('book' ,'pen' ,'textbook' ,'pencil_case')
c <- c(TRUE , FALSE ,TRUE , FALSE)
d <- c(2.5 , 8 ,10 ,7)
#Join the variables to create a data frame
df <- data.frame(a,b,c,d)
df
#Name the data frame
names(df) <- c('ID' ,'items' ,'store' ,'price')
df
#print the structure
str(df)
##Select row 1 in column 2
df[1, 2]
##Select Rows 1 to 2
df[1:2,]
#Seleect columns 1
df[,1]
##Select Rows 1 to 3 columns 3 to 4
df[1:3, 3:4]
df[1:3 , c(2,4)]
#slice with columns name
df[,c ('ID' , 'store')]
dfquantity <-quantity
quantity <- quantity
df
#Select the column ID
df$ID
x <- data.frame("SN" = 1:2, "Age" = c(21,15) , "Name" = c("John" ,"Dora"))
str(x)    #structure of x
x <- data.frame("SN" = 1:2, "Age" = c(21,15) , "Name" = c("John" ,"Dora"), stringsAsFactors = FALSE)
str(x) #now the third column is a character vector
x["Name"]
x$Name
x[["Name"]]
x[[3]]
x
x[1,"Age"] <- 20; x
rbind(x,list(1,16,"Paul"))
cbind(x,State=c("NY" ,"FL"))
x$State <- c("NY" ,"FL");x
x$State <- NULL
x
x <- x[-1,]
x
View(x)
#wild card match Queries
sqldf("select * from ucb where Freq between 20 AND 100")
sqldf("select * from ucb where Gender Like 'Fe%'")
sqldf("select * from ucb where Gender Like '%male%'")
sqldf("select * from ucb where Gender Like 'Ma%'")
sqldf("select * from ucb where Gender = 'Female' AND Freq >= 100")
sqldf("select * from ucb where Gender Like '_ale'")
sqldf("select * from ucb where Gender Not Like 'M_l_'")
sqldf("select Dept from ucb where Freq = (select max(Freq) from ucb where Admit = 'Admitted')")
sqldf("select Dept from ucb where Freq = (select max(Freq) from ucb where Gender = 'Female' AND Admit = 'Admitted')")
sqldf("select Dept from majors where Faculty = (select max(Faculty) from majors)")
majors
sqldf("select * from ucb inner join majors on ucb.Dept = majors.Dept")
#join the table on the left with resultant null's on the right table
sqldf("select * from ucb left join majors on ucb.Dept = majors.Dept")
#join the table on the right with the left
sqldf("select * from ucb right join majors on ucb.Dept = majors.Dept")
data()
View(UCBAdmissions)
sqldf("select Dept from ucb where Freq = (select max(Freq) from ucb where Gender = 'Female' AND Admit = 'Admitted')")
sqldf("select * from iris limit 5")
View(iris)
print(getwd())
setwd("C:/Users/hritu/Desktop/R sem4")
print(getwd())
data <-read.csv("SalesDatafor preprocessingmaneet kaur.csv")
View(data)
data2 <-read.csv("SalesDatafor preprocessingmaneet kaur.csv")
View(data)
View(data2)
print(getwd())
setwd("C:/Users/hritu/Desktop/R sem4")
print(getwd())
data2 <-read.csv("SalesDatafor preprocessingmaneet kaur.csv")
View(data2)
read.csv(file.choose(),header=TRUE, stringsAsFactors = TRUE)
data2<-read.csv(file.choose(),header=TRUE, stringsAsFactors = TRUE)
s1<-na.omit(data2)
view(s1)
view(s1)
summary(s1)
View(data2)
print(getwd())
setwd("C:/Users/hritu/Desktop/R sem4")
print(getwd())
data2 <-read.csv("SalesDatafor preprocessingmaneet kaur.csv")
View(data2)
s0<-read.csv(file.choose(),header=TRUE, stringsAsFactors = TRUE)
s0<-read.csv(file.choose(),header=TRUE, stringsAsFactors = TRUE)
s0<-read.csv(file.choose(),header=TRUE, stringsAsFactors = TRUE)
str(s0)
summary(s0)
s1<-na.omit(s0)
view(s1)
summary(s1)
View(s1)
summary(s1)
S0$Sales[is.na(S0$Sales)] <- mean(S0$Sales, na.rm = TRUE)
S0$Profit[is.na(S0$Profit)] <- mean(S0$Profit, na.rm = TRUE)
S0$Unit.Price[is.na(S0$Unit.Price)] <- mean(S0$Unit.Price, na.rm = TRUE)
S0$Sales[is.na(S0$Sales)] <- mean(S0$Sales, na.rm = TRUE)
s0<-read.csv(file.choose(),header=TRUE, stringsAsFactors = TRUE)
str(s0)
summary(s0)
s1<-na.omit(s0)
View(s1)
summary(s1)
S0$Sales[is.na(S0$Sales)] <- mean(S0$Sales, na.rm = TRUE)
S0$Profit[is.na(S0$Profit)] <- mean(S0$Profit, na.rm = TRUE)
S0$Unit.Price[is.na(S0$Unit.Price)] <- mean(S0$Unit.Price, na.rm = TRUE)
summary(S0)
s0$Sales[is.na(S0$Sales)] <- mean(S0$Sales, na.rm = TRUE)
s0$Sales[is.na(s0$Sales)] <- mean(s0$Sales, na.rm = TRUE)
s0$Profit[is.na(s0$Profit)] <- mean(s0$Profit, na.rm = TRUE)
s0$Unit.Price[is.na(s0$Unit.Price)] <- mean(s0$Unit.Price, na.rm = TRUE)
summary(s0)
