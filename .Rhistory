#create list
list1<-list (1:5)
print(list1)
list2<-list(10:14)
print(list2)
#convert the list to vector
v1<-unlist(list1)
v2<-unlist(list2)
print(v1)
print(v2)
#create list
list1<-list (1:5)
print(list1)
#Modifying vector elements
x<-c(-3,-2,-1,0,1,2)
x[2]<-0      #modify 2nd element
x[x<0]<-5    #modify elements less than 0
x<-x[1:4]   #truncate x to first 4 elements
x
#Create two vectors of two different lengths(Naming columns and rows)
vector1<-c(2,9,6)
vector2<-c(10,15,16,13,11,12)
column.names<-c("col1","col2","col3")
row.names<-c("row1","row2","row3")
matrix.names<-c("matrix1","matrix2")
#Take these vectors as input to the array
result<-array(c(vector1,vector2),dim=c(3,3,2),dimnames=list(row.names,column.names,matrix.names))
#Take these vectors as input to the array
result<-array(c(vector1,vector2),dim=c(3,3,2),dimnames=list(row.names,column.names,matrix.names))
print(result)
#Print the third row of second matrix of the array(ACCESSING)
print(result[3,,2])
#print the element in the the 1st row and 3d column of the 1st matrix
print(result[1,3,1])
#print the 2nd Matrix
print(result[,,2])
#Create two vectors of different lenghts
vector1 <- c(1,2,3)
## 7 Levels
## UP, HP Labels
#create Ordinal categorical vector
day_vector <- c('evening' ,'morning' , 'afternoon' ,'midday' ,'midnight', 'evening')
day_vector
#convert day__vector to a factor with ordered level
factor_day <- factor(day_vector, order = True , levels =c('evening' ,'morning' , 'afternoon' ,'midday' ,'midnight', 'evening'))
#print the new variable
factor_day
summary(factor_day)
#convert day__vector to a factor with ordered level
factor_day <- factor(day_vector, order = True , levels =c('evening' ,'morning' , 'afternoon' ,'midday' ,'midnight', 'evening'))
## 7 Levels
## UP, HP Labels
#create Ordinal categorical vector
day_vector <- c('evening' ,'morning' , 'afternoon' ,'midday' ,'midnight', 'evening')
day_vector
#convert day__vector to a factor with ordered level
factor_day <- factor(day_vector, order = True , levels =c('evening' ,'morning' , 'afternoon' ,'midday' ,'midnight', 'evening'))
#print the new variable
factor_day
#print the new variable
factor_day
summary(factor_day)
#convert day__vector to a factor with ordered level
factor_day <- factor(day_vector, order = True , levels =c('evening' ,'morning' , 'afternoon' ,'midday' ,'midnight', 'evening'))
#convert day__vector to a factor with ordered level
factor_day <- factor(day_vector, order = True , levels =c('evening' ,'morning' , 'afternoon' ,'midday' ,'midnight', 'evening'))
#convert day__vector to a factor with ordered level
factor_day <- factor(day_vector, order = True , levels =c('evening' ,'morning' , 'afternoon' ,'midday' ,'midnight', 'evening'))
#convert day__vector to a factor with ordered level
factor_day <- factor(day_vector, order = TRUE , levels =c('evening' ,'morning' , 'afternoon' ,'midday' ,'midnight', 'evening'))
#convert day__vector to a factor with ordered level
factor_day <- factor(day_vector, order = TRUE , levels =c('evening' ,'morning' , 'afternoon' ,'midday' ,'midnight')
#print the new variable
factor_day
#convert day__vector to a factor with ordered level
factor_day <- factor(day_vector, order = TRUE ,
levels =c('evening' ,'morning' , 'afternoon' ,'midday' ,'midnight'))
#print the new variable
factor_day
#convert day__vector to a factor with ordered level
factor_day <- factor(day_vector, order = TRUE ,levels =c('evening' ,'morning' , 'afternoon' ,'midday' ,'midnight'))
#print the new variable
factor_day
summary(factor_day)
#Generating Factor Levels: Syntax: gl(n,k,labels)
v <- gl(3, 4, labels = c("India" , "USA" , "Russia"))
BigData <- gl(3,2,labels = c("Hadoop" , "Spark" , "Flink" ))
print(BigData)
x <- factor(c("Single" , "married", "married" , "Single"  ))
x
x <- factor(c("Single" , "married", "married" , "Single"  )), levels = c("Single" , "married", "divorced"  ))));
x <- factor(c("Single" , "married", "married" , "Single"  )), levels = c("Single" , "married", "divorced"  )
x <- factor(c("Single" , "married", "married" , "Single"), levels = c("Single" , "married", "divorced"  ))
x
str(x)
x[c(2,4)]
x[-1]
x[2] <- "divorced"      #modify second element
x
x[3] <- "widowed"       #can not assign values outside levels
x
levels(x) <- c(levels(x), "widowed")    #add new level
x[3] <-"widowed"
x
#DATA FRAME
#Create  a,b,c,d variables
a <- c(10,20,30,40)
b <- c('book' ,'pen' ,'textbook' ,'pencil_case')
c <- c(TRUE , FALSE ,TRUE , FALSE)
d <- c(2.5 , 8 ,10 ,7)
#Join the variables to create a data frame
df <- data.frame(a,b,c,d)
df
#Name the data frame
names(df) <- c('ID' ,'items' ,'store' ,'price')
df
#print the structure
str(df)
##Select row 1 in column 2
df[1, 2]
##Select Rows 1 to 2
df[1:2,]
#Seleect columns 1
df[,1]
##Select Rows 1 to 3 columns 3 to 4
df[1:3, 3:4]
df[1:3 , c(2,4)]
#slice with columns name
df[,c ('ID' , 'store')]
dfquantity <-quantity
quantity <- quantity
df
df
#Select the column ID
df$ID
x <- data.frame("SN" = 1:2, "Age" = c(21,15) , "Name" = c("John" ,"Dora"))
str(x)    #structure of x
x <- data.frame("SN" = 1:2, "Age" = c(21,15) , "Name" = c("John" ,"Dora"), stringsAsFactors = FALSE)
str(x) #now the third column is a character vector
x["Name"]
x$Name
x[["Name"]]
x[[3]]
x
x[1,"Age"] <- 20; x
rbind(x,list(1,16,"Paul"))
cbind(x,State=c("NY" ,"FL"))
x$State <- c("NY" ,"FL");x
x$State <- NULL
x
x <- x[-1,]
x$State <- NULL
x
x <- x[-1,]
cbind(x,State=c("NY" ,"FL"))
x[1,"Age"] <- 20; x
rbind(x,list(1,16,"Paul"))
cbind(x,State=c("NY" ,"FL"))
x["Name"]
x$Name
x[["Name"]]
x <- data.frame("SN" = 1:2, "Age" = c(21,15) , "Name" = c("John" ,"Dora"))
str(x)    #structure of x
x <- data.frame("SN" = 1:2, "Age" = c(21,15) , "Name" = c("John" ,"Dora"), stringsAsFactors = FALSE)
str(x) #now the third column is a character vector
x["Name"]
x$Name
x[["Name"]]
x[[3]]
x
x[1,"Age"] <- 20; x
rbind(x,list(1,16,"Paul"))
cbind(x,State=c("NY" ,"FL"))
x$State <- c("NY" ,"FL");x
x$State <- NULL
x
#Example
x <- 0
if (x < 0)
print("Negative number")
} else if (x > 0) {
#Example
x <- 0
if (x < 0){
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else
print("Zero")
if (x < 0){
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else
print("Negative number")
if (x < 0){
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else
print("Positive number")
if (x < 0){
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else
print("Zero")
#in r studio else should be written just after if body end
#while
i <- 1
while (i<6){
print(i)
i = i+1
}
print(i)
i = i+1
while (i<6){
print(i)
i = i+1
}
while (i<6){
print(i)
i = i+1
}
#in r studio else should be written just after if body end
#while
i <- 1
while (i<6){
print(i)
i = i+1
}
abs(-4.2)
abs(4.2)
abs(4.2)
ceiling(1.4)
floor(1.4)
ceiling(1.4)
floor(1.4)
#example
a=c(5,7,2,9)
ifelse(a%%2==0,"even","odd")
#break statement
if(test_expression)
{
break
}
#example
x<-1:5
for(val in x)
{
if(val==3)
{
break
}
print(val)
}
#next statement
if(test_condition)
{
next
}
#example
1:5->x
for(val in x)
{
if(val==3)
{
next
}
}
#repeat loop
repeat
{
statement
}
{
print(x)
x=x+1
if(x==6)
{
break
}
}
#example
repeat
{
print(x)
x=x+1
if(x==6)
{
break
}
}
#example
1:5->x
#example
repeat
{
print(x)
x=x+1
if(x==6)
{
break
}
}
#example
repeat
{
print(x)
x=x+1
if(x==6)
{
break
}
}
#example
repeat
{
print(x)
x=x+1
if(x==6)
{
break
}
}
#example
x=1
repeat
{
print(x)
x=x+1
if(x==6)
{
break
}
}
#example
x<-1
repeat
{
print(x)
x=x+1
if(x==6)
{
break
}
}
#switch function
switch(expression,list)
#example
switch(2,"red","green","blue")
switch(1,"red","green","blue")
switch(4,"red","green","blue")
switch(0,"red","green","blue")->x
x
switch("color","color"="red","shape"="square","length"=5)
switch("length","color"="red","shape"="square","length"=5)
x<-switch(
3,
"my",
"switch",
"case"
)
pirnt(x)
"12"->y
x<-switch(
y,
"9"="good morning",
"12"="Good morning",
"18"="Good evening",
"21"="Good night"
)
#example
switch(2,"red","green","blue")
switch(1,"red","green","blue")
switch(4,"red","green","blue")
switch(0,"red","green","blue")->x
x
switch("color","color"="red","shape"="square","length"=5)
switch("length","color"="red","shape"="square","length"=5)
x<-switch(
3,
"my",
"switch",
"case"
)
print(x)
"12"->y
x<-switch(
y,
"9"="good morning",
"12"="Good morning",
"18"="Good evening",
"21"="Good night"
)
print(x)
"12"->y
x<-switch(
y,
"9"="good morning",
"12"="Good morning",
"18"="Good evening",
"21"="Good night"
)
print(x)
#example Armstrong
#taking input from user
num=as.numeric(readline(prompt='enter the numeber'))
#initialize sum
sum=0
#find the sum of the cube of each digit
temp=num
while(temp>0)
{
digit=temp%%10
sum=sum+(digit^3)
temp=floor(temp/10)
}
#display the result
if(num==sum)
{
print(paste(num,"s an armstromg"))
}else{
print(paste(num,"is not an armstrong"))
}
#Fetch all the details after 1 jan 2014
retval<-subset(data,Sales.Date>01-01-2014)
#Fetch all the details after 1 jan 2014
retval<-subset(data,Sales.Date>as.Date("01-01-2014"))
View(retval)
#Fetch all the details after 1 jan 2014
retval<-subset(data,Sales.Date>as.Date("01-01-2014"))
View(retval)
View(retval)
retval<-subset(data,Sales.Date>as.Date("01-01-2014"))
View(retval)
retval<-subset(data,Sales.Date>as.Date("01-01-2014"))
View(retval)
retval<-subset(data,Sales.Date>as.Date("01-01-2014"))
view(data)
View(data)
library(readxl)
library(readr)
View(data)
data <-read.csv("sales dataset.csv")
print(getwd())
data <-read.csv("sales dataset.csv")
View(data)
setwd("C:/Users/hritu/Desktop/R sem4")
data <-read.csv("sales dataset.csv")
View(data)
retval<-subset(data,Sales.Date>as.Date("01-01-2014"))
View(retval)
setwd("C:/Users/hritu/Desktop/R sem4")
data <-read.csv("sales dataset.csv")
View(data)
retval<-subset(data,Sales.Date>as.Date("01-01-2014"))
View(retval)
data$Sales.Date <- as.Date(data$Sales.Date, format="%d-%m-%Y")
retval<-subset(data,Sales.Date>as.Date("01-01-2014"))
View(retval)
data$Sales.Date <- as.Date(data$Sales.Date, format="%d-%m-%Y")
retval<-subset(data,Sales.Date>as.Date("01-01-2014","%d-%m-%Y"))
View(retval)
retval<-subset(data,Sales.Date>as.Date("01-01-2014","%d-%m-%Y"))
View(retval)
#converting date column in date month format
data$Sales.Date <- as.Date(data$Sales.Date, format="%d-%m-%Y")
retval<-subset(data,Sales.Date>as.Date("01-01-2014","%d-%m-%Y"))
View(retval)
#loading
View(mtcars)
?mtcars
#print the first 6 rows
head(mtcars,10)
tail(mtcars,4)
?mtcars
nrow(mtcars)
ncol(mtcars)
summary(mtcars)
str(mtcars)
#explore data
data(iris)
data(ToothGrowth)
head(PlantGrowth)
data(USArrests)
data("airquality")
View(airquality)
head(airquality)
#explore data
data(iris)
data(ToothGrowth)
head(PlantGrowth)
data(USArrests)
data("airquality")
View(airquality)
head(airquality)
subset(airquality, Temp>80,select = c(Ozone,Temp))
subset(airquality, Day==1,select = -Temp)
subset(airquality, select=Ozone:wind)
subset(airquality, select=Ozone:wind)
subset(airquality, select=Ozone:Wind)
with(airquality,subset(Ozone,Temp>80))
X<-c(1,5,8,4,6)
x
which(x==5)
which(x!=5)
datasets::npk
?npk
which(npk$yield==62)
which(npk$yield==48.8) & (npk$N==1)
which(npk$yield==max(npk$yield))
